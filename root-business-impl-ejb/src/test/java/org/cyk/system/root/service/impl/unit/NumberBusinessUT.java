package org.cyk.system.root.service.impl.unit;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.cyk.system.root.business.api.mathematics.NumberBusiness;
import org.cyk.system.root.business.impl.mathematics.NumberBusinessImpl;
import org.cyk.utility.test.unit.AbstractUnitTest;
import org.junit.Test;
import org.mockito.InjectMocks;

public class NumberBusinessUT extends AbstractUnitTest {

	private static final long serialVersionUID = 124355073578123984L;

	@InjectMocks private NumberBusinessImpl numberBusiness;
	
	@Override
	protected void registerBeans(Collection<Object> collection) {
		super.registerBeans(collection);
		collection.add(numberBusiness);
	}
	
	@Override
	protected void _execute_() {
		super._execute_();
		assertEquals("15", numberBusiness.encode("15", NumberBusiness.BASE_10_CHARACTERS));
		
		assertConcatenate(Integer.class, Arrays.asList(1,18,7412,951), 2, "0001001874120951");
		
	}
	
	@Test
	public void concatenate(){
		List<Long> numbers = Arrays.asList(7657L,7827L,7997L,8167L,8337L,8507L,8677L,8847L,9017L,9187L,9357L,9527L,9697L,9867L,10037L,10207L,10377L,10547L,10717L,10887L);
		assertConcatenate(Long.class, numbers, numbers.size()-1, "0765707827079970816708337085070867708847090170918709357095270969709867100371020710377105471071710887");
	}
	
	@Test
	public void base10ToBase16(){
		assertEncode16("15","F");
	}
	
	@Test
	public void base10ToBase36(){
		assertEncode36("15","F");
		assertEncode36("123","3F");
		assertEncode36("753159","G553");
		assertEncode36("8245691","4WQEZ");
		assertEncode36("123456789852","1KPQZGPO");	
	}
	
	//@Test
	public void base10ToBase62(){
		assertEncode62("15","f");
		assertEncode62("9517345682523141","HAycT9quN");
		assertEncode62("951753456825231419517534568252","jXNmjZ0aNKC6Z25f6");
		assertEncode62("9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"			
				,"zpwSzgM2K7bJnGiuX23l6N9LhD93b9rbPHhpS0K7263tRYbM0sdamkZ7uT0k4rYhhnBgCEvxtHkV");
		                
		assertEncode62("9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				+"9517534568252314195175345682523141951753456825231419517534568252314195175345682523141951753456825231419517534568252314195175345682523141"
				
				,"ZxvsZDCkYRxD0Mr0UjYZNZWqW1Fm7wguRLCvIjWFROqtHZewPBnlMQpFjmy7tsDoMzB1XChlY2HDHTgqGLFH0erOolOlnteVTADRrepIJWbMTjxgTFV9v64lWcozqt2w4oACyXAGM"
				+ "4DHKAD6R65GjoaPaSZRznmzM46v05k9MyhC82DoCZXsdEQnpzMU5Z8ylJXqbCRfZAuPwHLvmplFUoRloeKSH31ZXZWDQDAFEcU5jlzaX1HA3qz2oqih364mnyAEIZ5HfVCfeuFBJL"
				+ "riMNLm6RPGXb08xnFSqpgCpLD8hfrEpMobXI9ZPLukQq2akPoATxtOX7CiHxP8lolfzy7ud3vyw2w4Bt2BJ0Uv7M2zHlu2W9vVuftyi1J2p9eRYfvqk4j37tZ0y0B1MRBWJLhS98O"
				+ "tEk3mYjY0qpzwvOIew3Qcl41YSxNcS1yvvD8T9msreP1oGi4WKyaUH7mODiBsKOgqvOImcn8TGi0VPX8OMy7ts6KenCBYCKmrOtxcq1zynFdg5bI9lq3QTF6UY1nsiQIA6fMbknpV"
				+ "XoKdE06R7xcrw487Yus0CEKnTeCrSz2H6VLIANJxgP2AT57ukyiJuzpBwmF");
		
		assertEncode62(StringUtils.repeat("85479632541", 20 * 50 * 5),"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"
				+ "");

	}
	
	/**/
	
	private <NUMBER extends Number> void assertConcatenate(Class<NUMBER> numberClass,List<NUMBER> numbers,Integer highestIndex,String expectedConcatenation){
		NUMBER highest = numberBusiness.findHighest(numbers);
		assertEquals(numbers.get(highestIndex.intValue()), highest);
		String c = numberBusiness.concatenate(numbers, highest.toString().length());
		assertEquals(expectedConcatenation, c);
		List<NUMBER> numbers2 = new ArrayList<>(numberBusiness.deconcatenate(numberClass, c, highest.toString().length()));
		for(int i=0;i<numbers.size();i++)
			assertEquals(numbers.get(i), numbers2.get(i));
	}
	
	private void assertEncode16(String number,String result){
		assertCoding(number, "16", numberBusiness.encodeToBase16(number), result);
		//assertEquals(number+" to base 16" ,result, numberBusiness.encodeToBase16(number));
		assertEquals(result+" to base 10" ,number, numberBusiness.decodeBase16(result));
	}
	
	private void assertEncode36(String number,String result){
		assertCoding(number, "36", numberBusiness.encodeToBase36(number), result);
		//assertEquals(number+" to base 36" ,result, numberBusiness.encodeToBase36(number));
		assertEquals(result+" to base 10" ,number, numberBusiness.decodeBase36(result));
	}
	
	private void assertEncode62(String number,String result){
		assertCoding(number, "62", numberBusiness.encodeToBase62(number), result);
		//assertEquals(number+" to base 36" ,result, numberBusiness.encodeToBase36(number));
		assertEquals(result+" to base 10" ,number, numberBusiness.decodeBase62(result));
	}
	
	private void assertCoding(String number,String base,String actualResult,String expectedResult){
		String message = number+" to base "+base;
		assertEquals(message,expectedResult, actualResult);
		Integer numberOfCharacterDifference = number.length()-expectedResult.length();
		BigDecimal ratio = new BigDecimal(numberOfCharacterDifference).divide(new BigDecimal(number.length()),2,RoundingMode.DOWN);
		System.out.println(number.length()+" characters to "+expectedResult.length()+". Difference : "+numberOfCharacterDifference+". Ratio = "+ratio);
	}
}
